<!-- views/admin/projects/manage-projects.ejs -->
<% title = 'Manage Projects' %>
<link rel="stylesheet" href="/css/superadmin/manage-projects.css" />

<div class="admin-panel">
  <div class="admin-body">
    <!-- Sidebar -->
    <%- include('../../partials/superadmin-sidebar', {
      activePage: 'projects',     // or 'projects', 'properties', etc.
      pendingCount: pendingCount   // make sure you pass this in your controller
    }) %>

    <!-- Main content -->
    <main class="admin-content">
      <section class="projects-container">
        <div class="properties-header" style="display:flex;align-items:center;justify-content:space-between;gap:1rem;">
          <h1>All Projects by Country</h1>
          <a href="/superadmin/dashboard/projects/new" class="btn btn-primary">New Project</a>
        </div>

        <% Object.keys(grouped).forEach(country => { %>
          <div class="project-area">
            <h2><%= country %></h2>
            <% const list = grouped[country]; %>
            <% if (!list.length) { %>
              <p class="empty">No projects in <%= country %>.</p>
            <% } else { %>
              <div class="projects-grid">
                <% list.forEach(project => { %>
                  <div class="project-card">
                    <img
                      src="<%= project.photos?.[0] || '/img/project-placeholder.png' %>"
                      alt="<%= project.title %>"
                      class="thumb"
                    />
                    <h3><%= project.title %></h3>
                    <p class="location">
                      <%= project.city %>, <%= project.neighborhood %>
                    </p>

                    <div class="actions">
                      <form action="/superadmin/dashboard/projects/<%= project.id %>/delete" method="post" onsubmit="return confirm('Delete “<%= project.title %>”?');">
                        <input type="hidden" name="_csrf" value="<%= csrfToken %>">
                        <button type="submit" class="btn btn-danger">Delete</button>
                      </form>
                      <a href="/superadmin/dashboard/projects/<%= project.id %>/edit" class="btn btn-secondary">Edit</a>
                    </div>
                  </div>
                <% }); %>
              </div>
              <nav class="country-pagination" aria-label="Country pagination">
                <button type="button" class="page-btn prev" disabled>« Prev</button>
                <span class="page-info">Page 1</span>
                <button type="button" class="page-btn next">Next »</button>
              </nav>
            <% } %>
          </div>
        <% }); %>
      </section>
    </main>
  </div>
</div>

<script>
  (function() {
    function setupCountryPagination(area) {
      const grid = area.querySelector('.projects-grid');
      const cards = Array.from(grid ? grid.children : []);
      const nav = area.querySelector('.country-pagination');
      if (!grid || !cards.length || !nav) return;

      const prevBtn = nav.querySelector('.prev');
      const nextBtn = nav.querySelector('.next');
      const infoEl  = nav.querySelector('.page-info');
      let currentPage = 1;
      let totalPages = 1;
      let pageSize = 8; // Fixed: exactly 8 cards per page (2 rows x 4 columns typical)

      function recalc() {
        // Show all cards temporarily to compute actual columns
        cards.forEach(c => c.style.display = '');
        setTimeout(() => {
          // Force reflow
          const firstTop = cards[0].offsetTop;
          let cols = 0;
          for (let i = 0; i < cards.length; i++) {
            if (cards[i].offsetTop !== firstTop) break;
            cols++;
          }
          cols = Math.max(1, cols);
          pageSize = cols * 2; // exactly 2 rows
          totalPages = Math.max(1, Math.ceil(cards.length / pageSize));
          if (currentPage > totalPages) currentPage = totalPages;
          render();
        }, 50);
      }

      function render() {
        const start = (currentPage - 1) * pageSize;
        const end   = start + pageSize;
        cards.forEach((card, idx) => {
          card.style.display = (idx >= start && idx < end) ? '' : 'none';
        });
        prevBtn.disabled = currentPage <= 1;
        nextBtn.disabled = currentPage >= totalPages;
        if (infoEl) infoEl.textContent = 'Page ' + currentPage + ' of ' + totalPages;
        if (totalPages <= 1) {
          nav.style.display = 'none';
        } else {
          nav.style.display = 'flex';
        }
      }

      prevBtn.addEventListener('click', function() { 
        if (currentPage > 1) { 
          currentPage--; 
          render(); 
        } 
      });
      nextBtn.addEventListener('click', function() { 
        if (currentPage < totalPages) { 
          currentPage++; 
          render(); 
        } 
      });

      // Initial calc after DOM ready
      setTimeout(recalc, 200);
      window.addEventListener('load', recalc);
      // Recalc on resize (debounced)
      let t;
      window.addEventListener('resize', function() { 
        clearTimeout(t); 
        t = setTimeout(recalc, 200); 
      });
    }

    // Wait for DOM to be ready
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', function() {
        document.querySelectorAll('.project-area').forEach(setupCountryPagination);
      });
    } else {
      document.querySelectorAll('.project-area').forEach(setupCountryPagination);
    }
  })();
</script>